/*
  ==============================================================================

    This file was auto-generated by the Jucer!

    It contains the basic startup code for a Juce application.

  ==============================================================================
*/

#ifndef __PLUGINEDITOR_H_4ACCBAA__
#define __PLUGINEDITOR_H_4ACCBAA__

#include "../JuceLibraryCode/JuceHeader.h"
#include "PluginProcessor.h"


//==============================================================================
/** This is the editor component that our filter will display.
*/
class JuceDemoPluginAudioProcessorEditor  :
public AudioProcessorEditor,
private Timer,
private ComboBox::Listener,
private MidiInputCallback,
private Slider::Listener
{
public:
    JuceDemoPluginAudioProcessorEditor (JuceDemoPluginAudioProcessor&);
    ~JuceDemoPluginAudioProcessorEditor();

    //==============================================================================
    void paint (Graphics&) override;
    void resized() override;
    void timerCallback() override;
    
    void comboBoxChanged (ComboBox* box) override
    {
        if (box == &midiInputList) setMidiInput  (midiInputList.getSelectedItemIndex());
    }
    
    void sliderValueChanged(Slider*slider) override{
        int nVoices = getProcessor().synth.getNumVoices();
        if(slider == &gain_slider){
            for(int i = 0; i < nVoices; ++i) {
                getProcessor().synth.getVoice(i)->controllerMoved(2,gain_slider.getValue());
            }
            
            
            
        }
        
        
    }
    
    

private:
    class ParameterSlider;

    MidiKeyboardComponent midiKeyboard;
    Label timecodeDisplayLabel, gainLabel, delayLabel;
    ScopedPointer<ParameterSlider> gainSlider, delaySlider;
    Slider gain_slider;
    
    AudioDeviceManager audioDeviceManager;
   // MidiKeyboardState keyboardState;
  //  MidiKeyboardComponent keyboardComponent;
    AudioSourcePlayer audioSourcePlayer;
 //   SynthAudioSource synthAudioSource;
    
    ComboBox midiInputList;
    Label midiInputListLabel;
    
    int lastMidiInputIndex;
    
    
    void setMidiInput (int index)
    {
        const StringArray list (MidiInput::getDevices());
        
        audioDeviceManager.removeMidiInputCallback (list[lastMidiInputIndex], this);
        
        const String newInput (list[index]);
        
        if (! audioDeviceManager.isMidiInputEnabled (newInput))
            audioDeviceManager.setMidiInputEnabled (newInput, true);
        
        audioDeviceManager.addMidiInputCallback (newInput, this);
        midiInputList.setSelectedId (index + 1, dontSendNotification);
        
        lastMidiInputIndex = index;
    }
    
    // Needed virtual function
    void handleIncomingMidiMessage (MidiInput*, const MidiMessage& message) override {
        
        
        
    
    }
    


    
    //==============================================================================
    JuceDemoPluginAudioProcessor& getProcessor() const
    {
        return static_cast<JuceDemoPluginAudioProcessor&> (processor);
    }

    void updateTimecodeDisplay (AudioPlayHead::CurrentPositionInfo);
};


#endif  // __PLUGINEDITOR_H_4ACCBAA__
